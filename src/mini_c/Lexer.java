/* The following code was generated by JFlex 1.4.3 on 3/20/17 10:32 PM */

package mini_c;

import java_cup.runtime.*;
import java.util.*;
import static mini_c.sym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/20/17 10:32 PM from the specification file
 * <tt>src/mini_c/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\31\4\0"+
    "\1\32\1\15\1\21\1\22\1\5\1\25\1\20\1\26\1\0\1\4"+
    "\1\13\7\10\2\11\1\0\1\17\1\30\1\16\1\27\2\0\6\12"+
    "\24\6\4\0\1\6\1\0\2\12\1\40\1\45\1\47\1\46\1\6"+
    "\1\52\1\41\2\6\1\50\1\6\1\42\1\44\2\6\1\36\1\34"+
    "\1\35\1\37\1\43\1\51\1\14\1\6\1\53\1\23\1\33\1\24"+
    "\54\0\1\6\12\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\201\0\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6"+
    "\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\10\0\236\6"+
    "\11\0\46\6\2\0\1\6\7\0\47\6\110\0\33\6\5\0\3\6"+
    "\55\0\53\6\25\0\12\7\4\0\2\6\1\0\143\6\1\0\1\6"+
    "\17\0\2\6\7\0\2\6\12\7\3\6\2\0\1\6\20\0\1\6"+
    "\1\0\36\6\35\0\131\6\13\0\1\6\16\0\12\7\41\6\11\0"+
    "\2\6\4\0\1\6\5\0\26\6\4\0\1\6\11\0\1\6\3\0"+
    "\1\6\27\0\31\6\107\0\1\6\1\0\13\6\127\0\66\6\3\0"+
    "\1\6\22\0\1\6\7\0\12\6\4\0\12\7\1\0\7\6\1\0"+
    "\7\6\5\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\1\6\3\0\4\6\3\0\1\6\20\0\1\6\15\0\2\6\1\0"+
    "\3\6\4\0\12\7\2\6\23\0\6\6\4\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\37\0\4\6"+
    "\1\0\1\6\7\0\12\7\2\0\3\6\20\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\3\0\1\6"+
    "\22\0\1\6\17\0\2\6\4\0\12\7\25\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\3\0\1\6"+
    "\36\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\21\0\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6\26\0\1\6"+
    "\25\0\12\7\25\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\3\0\1\6\32\0\2\6\6\0\2\6\4\0\12\7"+
    "\25\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\3\0\1\6\40\0\1\6\1\0\2\6\4\0\12\7\1\0\2\6"+
    "\22\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\20\0\1\6"+
    "\21\0\2\6\4\0\12\7\12\0\6\6\5\0\22\6\3\0\30\6"+
    "\1\0\11\6\1\0\1\6\2\0\7\6\72\0\60\6\1\0\2\6"+
    "\14\0\7\6\11\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6"+
    "\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6"+
    "\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\0\2\6"+
    "\11\0\1\6\2\0\5\6\1\0\1\6\11\0\12\7\2\0\4\6"+
    "\40\0\1\6\37\0\12\7\26\0\10\6\1\0\44\6\33\0\5\6"+
    "\163\0\53\6\24\0\1\6\12\7\6\0\6\6\4\0\4\6\3\0"+
    "\1\6\3\0\2\6\7\0\3\6\4\0\15\6\14\0\1\6\1\0"+
    "\12\7\6\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0"+
    "\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0"+
    "\103\6\45\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\25\0\15\6\1\0\4\6\16\0\22\6\16\0"+
    "\22\6\16\0\15\6\1\0\3\6\17\0\64\6\43\0\1\6\4\0"+
    "\1\6\3\0\12\7\46\0\12\7\6\0\130\6\10\0\51\6\1\0"+
    "\1\6\5\0\106\6\12\0\35\6\51\0\12\7\36\6\2\0\5\6"+
    "\13\0\54\6\25\0\7\6\10\0\12\7\46\0\27\6\11\0\65\6"+
    "\53\0\12\7\6\0\12\7\15\0\1\6\135\0\57\6\21\0\7\6"+
    "\4\0\12\7\51\0\36\6\15\0\2\6\12\7\54\6\32\0\44\6"+
    "\34\0\12\7\3\0\3\6\12\7\44\6\153\0\4\6\1\0\4\6"+
    "\3\0\2\6\11\0\300\6\100\0\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\164\0\1\6\15\0\1\6\20\0\15\6\145\0\1\6"+
    "\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6"+
    "\5\0\5\6\4\0\1\6\64\0\2\6\u0a7b\0\57\6\1\0\57\6"+
    "\1\0\205\6\6\0\4\6\3\0\2\6\14\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\70\6\7\0\1\6\20\0\27\6\11\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\120\0\1\6\u01d5\0\2\6\52\0\5\6"+
    "\5\0\2\6\4\0\126\6\6\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\7\2\6\24\0\57\6\20\0\31\6\10\0\106\6\61\0\11\6"+
    "\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6"+
    "\1\0\3\6\1\0\4\6\1\0\27\6\35\0\64\6\16\0\62\6"+
    "\34\0\12\7\30\0\6\6\3\0\1\6\4\0\12\7\34\6\12\0"+
    "\27\6\31\0\35\6\7\0\57\6\34\0\1\6\12\7\46\0\51\6"+
    "\27\0\3\6\1\0\10\6\4\0\12\7\6\0\27\6\3\0\1\6"+
    "\5\0\60\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0\1\6"+
    "\1\0\1\6\30\0\3\6\2\0\13\6\7\0\3\6\14\0\6\6"+
    "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6"+
    "\15\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6"+
    "\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\0\12\6"+
    "\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\14\6"+
    "\164\0\5\6\1\0\207\6\23\0\12\7\7\0\32\6\6\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\1\6\5\2\0\1\6"+
    "\2\0\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\4\5\1\32\3\5\2\2\1\0\1\6\1\33\3\5"+
    "\1\34\3\5\1\35\3\5\1\36\4\5\1\37\1\40"+
    "\1\41\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\54\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\54\0\54\0\54\0\54\0\54\0\54"+
    "\0\54\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\54\0\54\0\54\0\54\0\54\0\54"+
    "\0\54\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\260\0\u0528\0\u0554"+
    "\0\u0580\0\u039c\0\54\0\u05ac\0\u0420\0\54\0\u05d8\0\u0604"+
    "\0\u0630\0\260\0\u065c\0\u0688\0\u06b4\0\54\0\u06e0\0\u070c"+
    "\0\u0738\0\260\0\u0764\0\u0790\0\u07bc\0\u07e8\0\260\0\260"+
    "\0\260\0\260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\2\2\7\1\6"+
    "\1\10\1\6\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\6\1\31\2\6\1\32\1\6\1\33"+
    "\3\6\1\34\1\6\1\35\2\6\55\0\3\3\54\0"+
    "\1\36\1\37\54\0\7\6\17\0\20\6\7\0\3\7"+
    "\1\0\1\7\50\0\1\40\2\0\1\40\1\41\37\0"+
    "\2\42\1\0\51\42\16\0\1\43\64\0\1\44\42\0"+
    "\1\45\53\0\1\46\53\0\1\47\67\0\1\50\54\0"+
    "\1\51\26\0\7\6\17\0\1\6\1\52\3\6\1\53"+
    "\12\6\6\0\7\6\17\0\13\6\1\54\4\6\6\0"+
    "\7\6\17\0\6\6\1\55\3\6\1\56\5\6\6\0"+
    "\7\6\17\0\10\6\1\57\7\6\6\0\7\6\17\0"+
    "\14\6\1\60\3\6\6\0\7\6\17\0\16\6\1\61"+
    "\1\6\1\36\1\62\1\63\51\36\5\37\1\64\46\37"+
    "\10\0\1\40\2\0\1\40\50\0\4\65\24\0\1\65"+
    "\4\0\3\65\21\0\1\66\44\0\7\6\17\0\2\6"+
    "\1\67\15\6\6\0\7\6\17\0\17\6\1\70\6\0"+
    "\7\6\17\0\1\6\1\71\16\6\6\0\7\6\17\0"+
    "\1\6\1\72\16\6\6\0\7\6\17\0\5\6\1\73"+
    "\12\6\6\0\7\6\17\0\1\74\17\6\6\0\7\6"+
    "\17\0\5\6\1\75\12\6\4\37\1\76\1\64\46\37"+
    "\6\0\7\6\17\0\3\6\1\77\14\6\6\0\7\6"+
    "\17\0\13\6\1\100\4\6\6\0\7\6\17\0\3\6"+
    "\1\101\14\6\6\0\7\6\17\0\11\6\1\72\6\6"+
    "\6\0\7\6\17\0\13\6\1\102\4\6\6\0\7\6"+
    "\17\0\14\6\1\103\3\6\6\0\7\6\17\0\4\6"+
    "\1\104\13\6\6\0\7\6\17\0\10\6\1\105\7\6"+
    "\6\0\7\6\17\0\2\6\1\106\15\6\6\0\7\6"+
    "\17\0\13\6\1\107\4\6\6\0\7\6\17\0\1\6"+
    "\1\110\16\6\6\0\7\6\17\0\12\6\1\111\5\6"+
    "\6\0\7\6\17\0\6\6\1\112\11\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2068];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\5\1\7\11\14\1\2\0"+
    "\1\1\2\0\7\11\11\1\1\11\1\0\1\1\1\11"+
    "\7\1\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[74];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int id)
    {
	return new Symbol(id, yyline, yycolumn);
    }

    private Symbol symbol(int id, Object value)
    {
	return new Symbol(id, yyline, yycolumn, value);
    }

    static Stack<Integer> indent = new Stack<Integer>();
    { indent.push(0); }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1702) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return symbol(MINUS);
          }
        case 35: break;
        case 14: 
          { return symbol(PLUS);
          }
        case 36: break;
        case 10: 
          { return symbol(LP);
          }
        case 37: break;
        case 26: 
          { return symbol(IF);
          }
        case 38: break;
        case 4: 
          { return symbol(TIMES);
          }
        case 39: break;
        case 31: 
          { return symbol(WHILE);
          }
        case 40: break;
        case 28: 
          { return symbol(TYPE);
          }
        case 41: break;
        case 21: 
          { return symbol(GE);
          }
        case 42: break;
        case 33: 
          { return symbol(SIZEOF);
          }
        case 43: break;
        case 20: 
          { return symbol(ARROW);
          }
        case 44: break;
        case 23: 
          { return symbol(NE);
          }
        case 45: break;
        case 17: 
          { return symbol(LT);
          }
        case 46: break;
        case 32: 
          { return symbol(STRUCT);
          }
        case 47: break;
        case 5: 
          { return symbol(IDENT, yytext().intern());
          }
        case 48: break;
        case 8: 
          { return symbol(SCOLON);
          }
        case 49: break;
        case 7: 
          { return symbol(EQUAL);
          }
        case 50: break;
        case 16: 
          { return symbol(GT);
          }
        case 51: break;
        case 27: 
          { return symbol(CST, (int) yytext().charAt(1));
          }
        case 52: break;
        case 19: 
          { return symbol(EQ);
          }
        case 53: break;
        case 24: 
          { return symbol(AND);
          }
        case 54: break;
        case 30: 
          { return symbol(ELSE);
          }
        case 55: break;
        case 25: 
          { return symbol(OR);
          }
        case 56: break;
        case 18: 
          { return symbol(NOT);
          }
        case 57: break;
        case 3: 
          { return symbol(DIV);
          }
        case 58: break;
        case 9: 
          { return symbol(COMMA);
          }
        case 59: break;
        case 29: 
          { /* ignore2 */
          }
        case 60: break;
        case 13: 
          { return symbol(RC);
          }
        case 61: break;
        case 6: 
          { return symbol(CST, Integer.decode(yytext()));
          }
        case 62: break;
        case 12: 
          { return symbol(LC);
          }
        case 63: break;
        case 1: 
          { throw new Exception (String.format (
        "Line %d, column %d: illegal character: '%s'\n", yyline, yycolumn, yytext()
      ));
          }
        case 64: break;
        case 11: 
          { return symbol(RP);
          }
        case 65: break;
        case 22: 
          { return symbol(LE);
          }
        case 66: break;
        case 2: 
          { /* ignore */
          }
        case 67: break;
        case 34: 
          { return symbol(RETURN);
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException, Exception {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          scanner = new Lexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
