
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 18 03:54:10 CET 2017
//----------------------------------------------------

package mini_c;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 18 03:54:10 CET 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\022" +
    "\004\000\002\022\002\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\012\006\000" +
    "\002\013\010\000\002\014\010\000\002\014\012\000\002" +
    "\024\005\000\002\024\003\000\002\025\006\000\002\025" +
    "\004\000\002\023\004\000\002\023\002\000\002\020\003" +
    "\000\002\020\002\000\002\021\005\000\002\021\003\000" +
    "\002\006\006\000\002\007\004\000\002\007\006\000\002" +
    "\017\004\000\002\017\002\000\002\005\003\000\002\005" +
    "\004\000\002\005\007\000\002\005\011\000\002\005\007" +
    "\000\002\005\003\000\002\005\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\006\000\002\004\004\000\002" +
    "\004\004\000\002\004\005\000\002\004\007\000\002\004" +
    "\005\000\002\010\003\000\002\010\005\000\002\015\003" +
    "\000\002\015\002\000\002\016\005\000\002\016\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\010\002\ufffe\015\013\016\011\001\002\000" +
    "\010\002\ufffb\015\ufffb\016\ufffb\001\002\000\010\002\ufffd" +
    "\015\ufffd\016\ufffd\001\002\000\010\002\ufffe\015\013\016" +
    "\011\001\002\000\010\002\ufffc\015\ufffc\016\ufffc\001\002" +
    "\000\004\002\161\001\002\000\004\004\146\001\002\000" +
    "\004\002\000\001\002\000\004\004\015\001\002\000\004" +
    "\030\145\001\002\000\010\022\017\026\016\030\ufff4\001" +
    "\002\000\004\004\037\001\002\000\010\015\024\016\021" +
    "\023\uffee\001\002\000\004\023\uffef\001\002\000\004\004" +
    "\141\001\002\000\004\023\030\001\002\000\006\023\uffec" +
    "\026\026\001\002\000\004\004\025\001\002\000\006\023" +
    "\uffea\026\uffea\001\002\000\006\015\024\016\021\001\002" +
    "\000\004\023\uffed\001\002\000\004\024\031\001\002\000" +
    "\036\004\ufff0\005\ufff0\007\ufff0\011\ufff0\014\ufff0\015\036" +
    "\016\035\020\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0\030" +
    "\ufff0\032\ufff0\001\002\000\010\002\ufff7\015\ufff7\016\ufff7" +
    "\001\002\000\036\004\ufff0\005\ufff0\007\ufff0\011\ufff0\014" +
    "\ufff0\015\036\016\035\020\ufff0\021\ufff0\022\ufff0\024\ufff0" +
    "\025\ufff0\030\ufff0\032\ufff0\001\002\000\032\004\054\005" +
    "\047\007\060\011\065\014\063\020\053\021\055\022\052" +
    "\024\031\025\uffe7\030\061\032\050\001\002\000\004\004" +
    "\040\001\002\000\004\004\037\001\002\000\006\026\016" +
    "\030\ufff4\001\002\000\004\033\042\001\002\000\004\030" +
    "\046\001\002\000\004\004\043\001\002\000\006\026\044" +
    "\030\ufff2\001\002\000\004\033\042\001\002\000\004\030" +
    "\ufff3\001\002\000\040\002\ufff9\004\ufff9\005\ufff9\007\ufff9" +
    "\011\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\024\ufff9\025\ufff9\030\ufff9\032\ufff9\001\002\000\032" +
    "\006\uffdf\012\uffdf\013\uffdf\017\uffdf\023\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\001\002" +
    "\000\016\004\054\005\047\014\063\021\055\022\052\032" +
    "\050\001\002\000\004\025\136\001\002\000\016\004\054" +
    "\005\047\014\063\021\055\022\052\032\050\001\002\000" +
    "\004\022\130\001\002\000\034\006\uffd7\012\uffd7\013\uffd7" +
    "\017\uffd7\022\121\023\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\034\uffd7\001\002\000\004\022\115" +
    "\001\002\000\034\004\uffe1\005\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\014\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1" +
    "\030\uffe1\032\uffe1\001\002\000\032\004\054\005\047\007" +
    "\060\011\065\014\063\020\053\021\055\022\052\024\031" +
    "\025\uffe7\030\061\032\050\001\002\000\004\022\106\001" +
    "\002\000\034\004\uffe6\005\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\014\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\030" +
    "\uffe6\032\uffe6\001\002\000\032\006\uffde\012\uffde\013\uffde" +
    "\017\uffde\023\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\001\002\000\016\004\054\005\047" +
    "\014\063\021\055\022\052\032\050\001\002\000\026\006" +
    "\071\012\070\013\101\017\074\027\072\030\104\031\073" +
    "\032\067\033\100\034\076\001\002\000\016\004\054\005" +
    "\047\014\063\021\055\022\052\032\050\001\002\000\026" +
    "\006\071\012\070\013\101\017\074\027\072\030\077\031" +
    "\073\032\067\033\100\034\076\001\002\000\016\004\uffce" +
    "\005\uffce\014\uffce\021\uffce\022\uffce\032\uffce\001\002\000" +
    "\016\004\uffcb\005\uffcb\014\uffcb\021\uffcb\022\uffcb\032\uffcb" +
    "\001\002\000\016\004\uffd0\005\uffd0\014\uffd0\021\uffd0\022" +
    "\uffd0\032\uffd0\001\002\000\016\004\uffd1\005\uffd1\014\uffd1" +
    "\021\uffd1\022\uffd1\032\uffd1\001\002\000\016\004\uffcf\005" +
    "\uffcf\014\uffcf\021\uffcf\022\uffcf\032\uffcf\001\002\000\004" +
    "\004\103\001\002\000\016\004\054\005\047\014\063\021" +
    "\055\022\052\032\050\001\002\000\016\004\uffcc\005\uffcc" +
    "\014\uffcc\021\uffcc\022\uffcc\032\uffcc\001\002\000\034\004" +
    "\uffe0\005\uffe0\007\uffe0\010\uffe0\011\uffe0\014\uffe0\020\uffe0" +
    "\021\uffe0\022\uffe0\024\uffe0\025\uffe0\030\uffe0\032\uffe0\001" +
    "\002\000\016\004\uffcd\005\uffcd\014\uffcd\021\uffcd\022\uffcd" +
    "\032\uffcd\001\002\000\016\004\uffca\005\uffca\014\uffca\021" +
    "\uffca\022\uffca\032\uffca\001\002\000\032\006\071\012\070" +
    "\013\101\017\074\023\uffda\026\uffda\027\072\030\uffda\031" +
    "\073\032\067\033\100\034\076\001\002\000\032\006\uffd6" +
    "\012\uffd6\013\uffd6\017\uffd6\023\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\001\002\000\034" +
    "\004\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5\014\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\030\uffe5\032\uffe5" +
    "\001\002\000\032\006\uffdc\012\uffdc\013\uffdc\017\074\023" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\001\002\000\016\004\054\005\047\014\063\021" +
    "\055\022\052\032\050\001\002\000\026\006\071\012\070" +
    "\013\101\017\074\023\110\027\072\031\073\032\067\033" +
    "\100\034\076\001\002\000\030\004\054\005\047\007\060" +
    "\011\065\014\063\020\053\021\055\022\052\024\031\030" +
    "\061\032\050\001\002\000\034\004\uffe4\005\uffe4\007\uffe4" +
    "\010\112\011\uffe4\014\uffe4\020\uffe4\021\uffe4\022\uffe4\024" +
    "\uffe4\025\uffe4\030\uffe4\032\uffe4\001\002\000\030\004\054" +
    "\005\047\007\060\011\065\014\063\020\053\021\055\022" +
    "\052\024\031\030\061\032\050\001\002\000\034\004\uffe3" +
    "\005\uffe3\007\uffe3\010\uffe3\011\uffe3\014\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\024\uffe3\025\uffe3\030\uffe3\032\uffe3\001\002" +
    "\000\004\025\uffe8\001\002\000\004\016\116\001\002\000" +
    "\004\004\117\001\002\000\004\023\120\001\002\000\032" +
    "\006\uffd9\012\uffd9\013\uffd9\017\uffd9\023\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\001\002" +
    "\000\020\004\054\005\047\014\063\021\055\022\052\023" +
    "\uffd4\032\050\001\002\000\004\023\127\001\002\000\004" +
    "\023\uffd5\001\002\000\030\006\071\012\070\013\101\017" +
    "\074\023\uffd2\026\125\027\072\031\073\032\067\033\100" +
    "\034\076\001\002\000\016\004\054\005\047\014\063\021" +
    "\055\022\052\032\050\001\002\000\004\023\uffd3\001\002" +
    "\000\032\006\uffdd\012\uffdd\013\uffdd\017\uffdd\023\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\001\002\000\016\004\054\005\047\014\063\021\055\022" +
    "\052\032\050\001\002\000\026\006\071\012\070\013\101" +
    "\017\074\023\132\027\072\031\073\032\067\033\100\034" +
    "\076\001\002\000\030\004\054\005\047\007\060\011\065" +
    "\014\063\020\053\021\055\022\052\024\031\030\061\032" +
    "\050\001\002\000\034\004\uffe2\005\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\014\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2\025" +
    "\uffe2\030\uffe2\032\uffe2\001\002\000\026\006\071\012\070" +
    "\013\101\017\074\023\135\027\072\031\073\032\067\033" +
    "\100\034\076\001\002\000\032\006\uffd8\012\uffd8\013\uffd8" +
    "\017\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\001\002\000\042\002\uffeb\004\uffeb" +
    "\005\uffeb\007\uffeb\010\uffeb\011\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\030\uffeb" +
    "\032\uffeb\001\002\000\032\006\uffdb\012\uffdb\013\uffdb\017" +
    "\074\023\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\001\002\000\032\004\ufff1\005\ufff1\007" +
    "\ufff1\011\ufff1\014\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1" +
    "\025\ufff1\030\ufff1\032\ufff1\001\002\000\004\033\142\001" +
    "\002\000\004\004\143\001\002\000\006\023\uffe9\026\uffe9" +
    "\001\002\000\004\030\ufff5\001\002\000\040\002\ufffa\004" +
    "\ufffa\005\ufffa\007\ufffa\011\ufffa\014\ufffa\015\ufffa\016\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\030\ufffa\032" +
    "\ufffa\001\002\000\006\024\147\033\150\001\002\000\010" +
    "\015\036\016\035\025\ufff0\001\002\000\004\004\151\001" +
    "\002\000\010\022\152\026\044\030\ufff2\001\002\000\010" +
    "\015\024\016\021\023\uffee\001\002\000\004\023\154\001" +
    "\002\000\004\024\031\001\002\000\010\002\ufff6\015\ufff6" +
    "\016\ufff6\001\002\000\004\025\157\001\002\000\004\030" +
    "\160\001\002\000\010\002\ufff8\015\ufff8\016\ufff8\001\002" +
    "\000\004\002\001\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\016\002\007\011\005\012\004\013\006\014" +
    "\003\022\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\005\012\004\013\006\014\003\022\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\143\001\001\000\010" +
    "\007\022\020\021\021\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\022\021\026\001" +
    "\001\000\002\001\001\000\004\006\031\001\001\000\006" +
    "\012\032\023\033\001\001\000\002\001\001\000\006\012" +
    "\032\023\137\001\001\000\014\004\063\005\056\006\055" +
    "\010\061\017\050\001\001\000\002\001\001\000\004\024" +
    "\013\001\001\000\002\001\001\000\004\025\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\136\010\061\001\001\000" +
    "\002\001\001\000\006\004\133\010\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\063\005\056\006\055\010\061\017\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\104\010\061\001\001\000\004\003\074" +
    "\001\001\000\006\004\065\010\061\001\001\000\004\003" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\101\010\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\074\001\001\000\006\004\106\010\061\001" +
    "\001\000\004\003\074\001\001\000\012\004\063\005\110" +
    "\006\055\010\061\001\001\000\002\001\001\000\012\004" +
    "\063\005\112\006\055\010\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\123\010\061" +
    "\015\121\016\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\074\001\001\000\010\004\123\010\061" +
    "\016\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\130\010\061\001\001\000\004\003\074\001\001" +
    "\000\012\004\063\005\132\006\055\010\061\001\001\000" +
    "\002\001\001\000\004\003\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\040\001" +
    "\001\000\006\012\032\023\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\022\020\152\021\017\001" +
    "\001\000\002\001\001\000\004\006\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");

    if (info instanceof Symbol) {
      Symbol s = ((Symbol) info);

      if (s.left >= 0) {                
        m.append(" in line "+(s.left+1));   
        if (s.right >= 0)                    
          m.append(", column "+(s.right+1));
      }
    }
    m.append(" : "+message);

    System.err.println(m);
  }
 
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binop ::= OR 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bor;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binop ::= AND 
            {
              Binop RESULT =null;
		 RESULT = Binop.Band;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binop ::= DIV 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bdiv;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binop ::= TIMES 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bmul;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // binop ::= MINUS 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bsub; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binop ::= PLUS 
            {
              Binop RESULT =null;
		 RESULT = Binop.Badd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // binop ::= CMP 
            {
              Binop RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Binop c = (Binop)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binop ::= EQUAL 
            {
              Binop RESULT =null;
		 RESULT = Binop.Baff;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nonempty_list_comma_expr ::= expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Expr> le = new LinkedList<Expr>(); le.add(e); RESULT = le; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nonempty_list_comma_expr ::= expr COMMA nonempty_list_comma_expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> le = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 le.addFirst(e); RESULT = le; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // list_comma_expr ::= 
            {
              LinkedList<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list_comma_expr ::= nonempty_list_comma_expr 
            {
              LinkedList<Expr> RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> le = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = le; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // left_value ::= expr ARROW IDENT 
            {
              Elv RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LVarrow(e,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // left_value ::= IDENT 
            {
              Elv RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LVident(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= LP expr RP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= SIZEOF LP STRUCT IDENT RP 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Esizeof(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr binop expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Binop op = (Binop)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ebinop(op,e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Emin(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Enot(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= IDENT LP list_comma_expr RP 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> le = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Ecall(i,le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= left_value 
            {
              Expr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Elv lv = (Elv)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= CST 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ecst(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inst ::= RETURN expr SCOLON 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Ireturn(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inst ::= block 
            {
              Inst RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iblock b = (Iblock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inst ::= WHILE LP expr RP inst 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Iwhile(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inst ::= IF LP expr RP inst ELSE inst 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Inst i1 = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst i2 = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Iifelse(e, i1, i2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inst ::= IF LP expr RP inst 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Iifelse(e, i, new Iexpr(new Ecst(0))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inst ::= expr SCOLON 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Iexpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inst ::= SCOLON 
            {
              Inst RESULT =null;
		 RESULT = new Iexpr(new Ecst(0)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_inst ::= 
            {
              LinkedList<Inst> RESULT =null;
		 RESULT = new LinkedList<Inst>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_inst",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_inst ::= inst list_inst 
            {
              LinkedList<Inst> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Inst> li = (LinkedList<Inst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 li.addFirst(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_inst",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param ::= STRUCT IDENT TIMES IDENT 
            {
              Param RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param(i1,i2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param ::= TYPE IDENT 
            {
              Param RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param("int",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // block ::= LC list_decl_vars list_inst RC 
            {
              Iblock RESULT =null;
		int ldvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ldvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Dvar> ldv = (LinkedList<Dvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Inst> li = (LinkedList<Inst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Iblock(ldv,li); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nonempty_list_comma_param ::= param 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Param> lp = new LinkedList<Param>(); lp.add(p); RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nonempty_list_comma_param ::= param COMMA nonempty_list_comma_param 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Param> lp = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lp.addFirst(p); RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_comma_param ::= 
            {
              LinkedList<Param> RESULT =null;
		 RESULT = new LinkedList<Param>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_param",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_comma_param ::= nonempty_list_comma_param 
            {
              LinkedList<Param> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Param> lp = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_param",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_decl_vars ::= 
            {
              LinkedList<Dvar> RESULT =null;
		 RESULT = new LinkedList<Dvar>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl_vars",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_decl_vars ::= decl_var list_decl_vars 
            {
              LinkedList<Dvar> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dvar dv = (Dvar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ldvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ldvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Dvar> ldv = (LinkedList<Dvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ldv.addFirst(dv); RESULT = ldv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl_vars",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nonempty_list_comma_ident_star ::= TIMES IDENT 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<String> li = new LinkedList<String>(); li.add(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident_star",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nonempty_list_comma_ident_star ::= TIMES IDENT COMMA nonempty_list_comma_ident_star 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 li.addFirst(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident_star",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nonempty_list_comma_ident ::= IDENT 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<String> li = new LinkedList<String>(); li.add(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nonempty_list_comma_ident ::= IDENT COMMA nonempty_list_comma_ident 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 li.addFirst(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl_fct ::= STRUCT IDENT TIMES IDENT LP list_comma_param RP block 
            {
              Dfct RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Param> lp = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iblock b = (Iblock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dfct(i1, i2, lp, new Iblock(b,lp)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_fct",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl_fct ::= TYPE IDENT LP list_comma_param RP block 
            {
              Dfct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Param> lp = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iblock b = (Iblock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dfct("int", i, lp, new Iblock(b,lp)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_fct",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_typ ::= STRUCT IDENT LC list_decl_vars RC SCOLON 
            {
              Dtyp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Dvar> ld = (LinkedList<Dvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Dtyp(i,ld); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_typ",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_var ::= STRUCT IDENT nonempty_list_comma_ident_star SCOLON 
            {
              Dvar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dvar(i,li); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_var ::= TYPE nonempty_list_comma_ident SCOLON 
            {
              Dvar RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dvar("int", li); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= decl_fct 
            {
              Decl RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dfct df = (Dfct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = df; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= decl_typ 
            {
              Decl RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dtyp dt = (Dtyp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= decl_var 
            {
              Decl RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dvar dv = (Dvar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_decl ::= 
            {
              LinkedList<Decl> RESULT =null;
		 RESULT = new LinkedList<Decl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list_decl ::= decl list_decl 
            {
              LinkedList<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Decl> ld = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ld.addFirst(d); RESULT = ld; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= list_decl 
            {
              File RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Decl> ld = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new File(ld); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		File start_val = (File)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

