
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 20 22:32:52 CET 2017
//----------------------------------------------------

package mini_c;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 20 22:32:52 CET 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\022" +
    "\004\000\002\022\002\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\012\006\000" +
    "\002\013\010\000\002\014\010\000\002\014\012\000\002" +
    "\024\005\000\002\024\003\000\002\025\006\000\002\025" +
    "\004\000\002\023\004\000\002\023\002\000\002\020\003" +
    "\000\002\020\002\000\002\021\005\000\002\021\003\000" +
    "\002\006\006\000\002\007\004\000\002\007\006\000\002" +
    "\017\004\000\002\017\002\000\002\005\003\000\002\005" +
    "\004\000\002\005\007\000\002\005\011\000\002\005\007" +
    "\000\002\005\003\000\002\005\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\006\000\002\004\004\000\002" +
    "\004\004\000\002\004\005\000\002\004\007\000\002\004" +
    "\005\000\002\010\003\000\002\010\005\000\002\015\003" +
    "\000\002\015\002\000\002\016\005\000\002\016\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\010\002\ufffe\022\013\023\011\001\002\000" +
    "\010\002\ufffb\022\ufffb\023\ufffb\001\002\000\010\002\ufffd" +
    "\022\ufffd\023\ufffd\001\002\000\010\002\ufffe\022\013\023" +
    "\011\001\002\000\010\002\ufffc\022\ufffc\023\ufffc\001\002" +
    "\000\004\002\166\001\002\000\004\004\153\001\002\000" +
    "\004\002\000\001\002\000\004\004\015\001\002\000\004" +
    "\035\152\001\002\000\010\027\017\033\016\035\ufff4\001" +
    "\002\000\004\004\037\001\002\000\010\022\024\023\021" +
    "\030\uffee\001\002\000\004\030\uffef\001\002\000\004\004" +
    "\146\001\002\000\004\030\030\001\002\000\006\030\uffec" +
    "\033\026\001\002\000\004\004\025\001\002\000\006\030" +
    "\uffea\033\uffea\001\002\000\006\022\024\023\021\001\002" +
    "\000\004\030\uffed\001\002\000\004\031\031\001\002\000" +
    "\036\004\ufff0\005\ufff0\006\ufff0\010\ufff0\013\ufff0\022\036" +
    "\023\035\025\ufff0\026\ufff0\027\ufff0\031\ufff0\032\ufff0\035" +
    "\ufff0\037\ufff0\001\002\000\010\002\ufff7\022\ufff7\023\ufff7" +
    "\001\002\000\036\004\ufff0\005\ufff0\006\ufff0\010\ufff0\013" +
    "\ufff0\022\036\023\035\025\ufff0\026\ufff0\027\ufff0\031\ufff0" +
    "\032\ufff0\035\ufff0\037\ufff0\001\002\000\032\004\054\005" +
    "\047\006\060\010\065\013\063\025\053\026\055\027\052" +
    "\031\031\032\uffe7\035\061\037\050\001\002\000\004\004" +
    "\040\001\002\000\004\004\037\001\002\000\006\033\016" +
    "\035\ufff4\001\002\000\004\040\042\001\002\000\004\035" +
    "\046\001\002\000\004\004\043\001\002\000\006\033\044" +
    "\035\ufff2\001\002\000\004\040\042\001\002\000\004\035" +
    "\ufff3\001\002\000\040\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\010\ufff9\013\ufff9\022\ufff9\023\ufff9\025\ufff9\026\ufff9\027" +
    "\ufff9\031\ufff9\032\ufff9\035\ufff9\037\ufff9\001\002\000\044" +
    "\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\024\uffdf\030\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\001\002\000\016\004" +
    "\054\005\047\013\063\026\055\027\052\037\050\001\002" +
    "\000\004\032\143\001\002\000\016\004\054\005\047\013" +
    "\063\026\055\027\052\037\050\001\002\000\004\027\135" +
    "\001\002\000\046\011\uffd7\012\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\024\uffd7\027\126\030\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\001\002\000\004\027\122\001\002\000\034\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\013\uffe1\025\uffe1\026" +
    "\uffe1\027\uffe1\031\uffe1\032\uffe1\035\uffe1\037\uffe1\001\002" +
    "\000\032\004\054\005\047\006\060\010\065\013\063\025" +
    "\053\026\055\027\052\031\031\032\uffe7\035\061\037\050" +
    "\001\002\000\004\027\113\001\002\000\034\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\013\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\031\uffe6\032\uffe6\035\uffe6\037\uffe6\001\002\000" +
    "\044\011\uffde\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\024\uffde\030\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\uffde\041\uffde\001\002\000\016" +
    "\004\054\005\047\013\063\026\055\027\052\037\050\001" +
    "\002\000\040\011\070\012\106\014\073\015\104\016\105" +
    "\017\077\020\101\021\071\024\075\034\072\035\111\036" +
    "\074\037\067\040\103\041\100\001\002\000\016\004\054" +
    "\005\047\013\063\026\055\027\052\037\050\001\002\000" +
    "\040\011\070\012\106\014\073\015\104\016\105\017\077" +
    "\020\101\021\071\024\075\034\072\035\102\036\074\037" +
    "\067\040\103\041\100\001\002\000\016\004\uffc9\005\uffc9" +
    "\013\uffc9\026\uffc9\027\uffc9\037\uffc9\001\002\000\016\004" +
    "\uffc6\005\uffc6\013\uffc6\026\uffc6\027\uffc6\037\uffc6\001\002" +
    "\000\016\004\uffcb\005\uffcb\013\uffcb\026\uffcb\027\uffcb\037" +
    "\uffcb\001\002\000\016\004\uffd1\005\uffd1\013\uffd1\026\uffd1" +
    "\027\uffd1\037\uffd1\001\002\000\016\004\uffd0\005\uffd0\013" +
    "\uffd0\026\uffd0\027\uffd0\037\uffd0\001\002\000\016\004\uffca" +
    "\005\uffca\013\uffca\026\uffca\027\uffca\037\uffca\001\002\000" +
    "\004\004\110\001\002\000\016\004\054\005\047\013\063" +
    "\026\055\027\052\037\050\001\002\000\016\004\uffcd\005" +
    "\uffcd\013\uffcd\026\uffcd\027\uffcd\037\uffcd\001\002\000\016" +
    "\004\uffc7\005\uffc7\013\uffc7\026\uffc7\027\uffc7\037\uffc7\001" +
    "\002\000\016\004\uffcc\005\uffcc\013\uffcc\026\uffcc\027\uffcc" +
    "\037\uffcc\001\002\000\034\004\uffe0\005\uffe0\006\uffe0\007" +
    "\uffe0\010\uffe0\013\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0" +
    "\032\uffe0\035\uffe0\037\uffe0\001\002\000\016\004\uffc8\005" +
    "\uffc8\013\uffc8\026\uffc8\027\uffc8\037\uffc8\001\002\000\016" +
    "\004\uffcf\005\uffcf\013\uffcf\026\uffcf\027\uffcf\037\uffcf\001" +
    "\002\000\016\004\uffce\005\uffce\013\uffce\026\uffce\027\uffce" +
    "\037\uffce\001\002\000\016\004\uffc5\005\uffc5\013\uffc5\026" +
    "\uffc5\027\uffc5\037\uffc5\001\002\000\044\011\070\012\106" +
    "\014\073\015\104\016\105\017\077\020\101\021\071\024" +
    "\075\030\uffda\033\uffda\034\072\035\uffda\036\074\037\067" +
    "\040\103\041\100\001\002\000\044\011\uffd6\012\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\024\uffd6" +
    "\030\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\001\002\000\034\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\013\uffe5\025\uffe5\026\uffe5\027\uffe5\031" +
    "\uffe5\032\uffe5\035\uffe5\037\uffe5\001\002\000\044\011\uffdc" +
    "\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\024\075\030\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\001\002\000\016\004\054\005" +
    "\047\013\063\026\055\027\052\037\050\001\002\000\040" +
    "\011\070\012\106\014\073\015\104\016\105\017\077\020" +
    "\101\021\071\024\075\030\115\034\072\036\074\037\067" +
    "\040\103\041\100\001\002\000\030\004\054\005\047\006" +
    "\060\010\065\013\063\025\053\026\055\027\052\031\031" +
    "\035\061\037\050\001\002\000\034\004\uffe4\005\uffe4\006" +
    "\uffe4\007\117\010\uffe4\013\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\031\uffe4\032\uffe4\035\uffe4\037\uffe4\001\002\000\030\004" +
    "\054\005\047\006\060\010\065\013\063\025\053\026\055" +
    "\027\052\031\031\035\061\037\050\001\002\000\034\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\013\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\031\uffe3\032\uffe3\035\uffe3\037\uffe3\001" +
    "\002\000\004\032\uffe8\001\002\000\004\023\123\001\002" +
    "\000\004\004\124\001\002\000\004\030\125\001\002\000" +
    "\044\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\024\uffd9\030\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002\000\020" +
    "\004\054\005\047\013\063\026\055\027\052\030\uffd4\037" +
    "\050\001\002\000\004\030\134\001\002\000\004\030\uffd5" +
    "\001\002\000\042\011\070\012\106\014\073\015\104\016" +
    "\105\017\077\020\101\021\071\024\075\030\uffd2\033\132" +
    "\034\072\036\074\037\067\040\103\041\100\001\002\000" +
    "\016\004\054\005\047\013\063\026\055\027\052\037\050" +
    "\001\002\000\004\030\uffd3\001\002\000\044\011\uffdd\012" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\024\uffdd\030\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\001\002\000\016\004\054\005\047" +
    "\013\063\026\055\027\052\037\050\001\002\000\040\011" +
    "\070\012\106\014\073\015\104\016\105\017\077\020\101" +
    "\021\071\024\075\030\137\034\072\036\074\037\067\040" +
    "\103\041\100\001\002\000\030\004\054\005\047\006\060" +
    "\010\065\013\063\025\053\026\055\027\052\031\031\035" +
    "\061\037\050\001\002\000\034\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\013\uffe2\025\uffe2\026\uffe2\027\uffe2\031" +
    "\uffe2\032\uffe2\035\uffe2\037\uffe2\001\002\000\040\011\070" +
    "\012\106\014\073\015\104\016\105\017\077\020\101\021" +
    "\071\024\075\030\142\034\072\036\074\037\067\040\103" +
    "\041\100\001\002\000\044\011\uffd8\012\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\024\uffd8\030\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\001\002\000\042\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\013\uffeb\022\uffeb\023\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\031\uffeb\032\uffeb\035\uffeb\037\uffeb\001\002" +
    "\000\044\011\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\024\075\030\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002\000" +
    "\032\004\ufff1\005\ufff1\006\ufff1\010\ufff1\013\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\031\ufff1\032\ufff1\035\ufff1\037\ufff1\001" +
    "\002\000\004\040\147\001\002\000\004\004\150\001\002" +
    "\000\006\030\uffe9\033\uffe9\001\002\000\004\035\ufff5\001" +
    "\002\000\040\002\ufffa\004\ufffa\005\ufffa\006\ufffa\010\ufffa" +
    "\013\ufffa\022\ufffa\023\ufffa\025\ufffa\026\ufffa\027\ufffa\031" +
    "\ufffa\032\ufffa\035\ufffa\037\ufffa\001\002\000\006\031\154" +
    "\040\155\001\002\000\010\022\036\023\035\032\ufff0\001" +
    "\002\000\004\004\156\001\002\000\010\027\157\033\044" +
    "\035\ufff2\001\002\000\010\022\024\023\021\030\uffee\001" +
    "\002\000\004\030\161\001\002\000\004\031\031\001\002" +
    "\000\010\002\ufff6\022\ufff6\023\ufff6\001\002\000\004\032" +
    "\164\001\002\000\004\035\165\001\002\000\010\002\ufff8" +
    "\022\ufff8\023\ufff8\001\002\000\004\002\001\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\016\002\007\011\005\012\004\013\006\014" +
    "\003\022\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\005\012\004\013\006\014\003\022\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\150\001\001\000\010" +
    "\007\022\020\021\021\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\022\021\026\001" +
    "\001\000\002\001\001\000\004\006\031\001\001\000\006" +
    "\012\032\023\033\001\001\000\002\001\001\000\006\012" +
    "\032\023\144\001\001\000\014\004\063\005\056\006\055" +
    "\010\061\017\050\001\001\000\002\001\001\000\004\024" +
    "\013\001\001\000\002\001\001\000\004\025\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\143\010\061\001\001\000" +
    "\002\001\001\000\006\004\140\010\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\063\005\056\006\055\010\061\017\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\111\010\061\001\001\000\004\003\075" +
    "\001\001\000\006\004\065\010\061\001\001\000\004\003" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\106\010\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\075\001\001" +
    "\000\006\004\113\010\061\001\001\000\004\003\075\001" +
    "\001\000\012\004\063\005\115\006\055\010\061\001\001" +
    "\000\002\001\001\000\012\004\063\005\117\006\055\010" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\130\010\061\015\126\016\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\075\001" +
    "\001\000\010\004\130\010\061\016\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\135\010\061\001" +
    "\001\000\004\003\075\001\001\000\012\004\063\005\137" +
    "\006\055\010\061\001\001\000\002\001\001\000\004\003" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\040\001\001\000\006\012\032\023" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\022\020\157\021\017\001\001\000\002\001\001\000" +
    "\004\006\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public void report_error(String message, Object info) {
    StringBuilder m = new StringBuilder("Error");

    if (info instanceof Symbol) {
      Symbol s = ((Symbol) info);

      if (s.left >= 0) {                
        m.append(" in line "+(s.left+1));   
        if (s.right >= 0)                    
          m.append(", column "+(s.right+1));
      }
    }
    m.append(" : "+message);

    System.err.println(m);
  }
 
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // binop ::= OR 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bor; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // binop ::= AND 
            {
              Binop RESULT =null;
		 RESULT = Binop.Band; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // binop ::= DIV 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bdiv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // binop ::= TIMES 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bmul; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // binop ::= MINUS 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bsub; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // binop ::= PLUS 
            {
              Binop RESULT =null;
		 RESULT = Binop.Badd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // binop ::= GE 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bge; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // binop ::= GT 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bgt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // binop ::= LE 
            {
              Binop RESULT =null;
		 RESULT = Binop.Ble; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // binop ::= LT 
            {
              Binop RESULT =null;
		 RESULT = Binop.Blt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binop ::= NE 
            {
              Binop RESULT =null;
		 RESULT = Binop.Bne; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // binop ::= EQ 
            {
              Binop RESULT =null;
		 RESULT = Binop.Beq; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binop ::= EQUAL 
            {
              Binop RESULT =null;
		 RESULT = Binop.Baff; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binop",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nonempty_list_comma_expr ::= expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Expr> le = new LinkedList<Expr>(); le.add(e); RESULT = le; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nonempty_list_comma_expr ::= expr COMMA nonempty_list_comma_expr 
            {
              LinkedList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> le = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 le.addFirst(e); RESULT = le; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // list_comma_expr ::= 
            {
              LinkedList<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // list_comma_expr ::= nonempty_list_comma_expr 
            {
              LinkedList<Expr> RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expr> le = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = le; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // left_value ::= expr ARROW IDENT 
            {
              Elv RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LVarrow(e,i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // left_value ::= IDENT 
            {
              Elv RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LVident(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("left_value",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= LP expr RP 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= SIZEOF LP STRUCT IDENT RP 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Esizeof(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr binop expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Binop op = (Binop)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ebinop(op,e1,e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Emin(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Enot(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= IDENT LP list_comma_expr RP 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expr> le = (LinkedList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Ecall(i,le); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= left_value 
            {
              Expr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Elv lv = (Elv)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= CST 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Ecst(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // inst ::= RETURN expr SCOLON 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Ireturn(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // inst ::= block 
            {
              Inst RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iblock b = (Iblock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // inst ::= WHILE LP expr RP inst 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Iwhile(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // inst ::= IF LP expr RP inst ELSE inst 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Inst i1 = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst i2 = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Iifelse(e, i1, i2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // inst ::= IF LP expr RP inst 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Iifelse(e, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inst ::= expr SCOLON 
            {
              Inst RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Iexpr(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inst ::= SCOLON 
            {
              Inst RESULT =null;
		 RESULT = new Iexpr(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inst",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_inst ::= 
            {
              LinkedList<Inst> RESULT =null;
		 RESULT = new LinkedList<Inst>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_inst",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_inst ::= inst list_inst 
            {
              LinkedList<Inst> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Inst i = (Inst)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Inst> li = (LinkedList<Inst>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 li.addFirst(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_inst",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // param ::= STRUCT IDENT TIMES IDENT 
            {
              Param RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param(i1,i2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // param ::= TYPE IDENT 
            {
              Param RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Param("int",i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // block ::= LC list_decl_vars list_inst RC 
            {
              Iblock RESULT =null;
		int ldvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ldvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Dvar> ldv = (LinkedList<Dvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Inst> li = (LinkedList<Inst>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Iblock(ldv,li); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nonempty_list_comma_param ::= param 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<Param> lp = new LinkedList<Param>(); lp.add(p); RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nonempty_list_comma_param ::= param COMMA nonempty_list_comma_param 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Param p = (Param)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Param> lp = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 lp.addFirst(p); RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_param",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_comma_param ::= 
            {
              LinkedList<Param> RESULT =null;
		 RESULT = new LinkedList<Param>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_param",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_comma_param ::= nonempty_list_comma_param 
            {
              LinkedList<Param> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Param> lp = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_comma_param",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_decl_vars ::= 
            {
              LinkedList<Dvar> RESULT =null;
		 RESULT = new LinkedList<Dvar>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl_vars",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_decl_vars ::= decl_var list_decl_vars 
            {
              LinkedList<Dvar> RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dvar dv = (Dvar)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ldvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ldvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Dvar> ldv = (LinkedList<Dvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ldv.addFirst(dv); RESULT = ldv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl_vars",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nonempty_list_comma_ident_star ::= TIMES IDENT 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<String> li = new LinkedList<String>(); li.add(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident_star",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nonempty_list_comma_ident_star ::= TIMES IDENT COMMA nonempty_list_comma_ident_star 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 li.addFirst(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident_star",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nonempty_list_comma_ident ::= IDENT 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 LinkedList<String> li = new LinkedList<String>(); li.add(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nonempty_list_comma_ident ::= IDENT COMMA nonempty_list_comma_ident 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 li.addFirst(i); RESULT = li; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl_fct ::= STRUCT IDENT TIMES IDENT LP list_comma_param RP block 
            {
              Dfct RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Param> lp = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iblock b = (Iblock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dfct(i1, i2, lp, new Iblock(b,lp)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_fct",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl_fct ::= TYPE IDENT LP list_comma_param RP block 
            {
              Dfct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Param> lp = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iblock b = (Iblock)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Dfct("int", i, lp, new Iblock(b,lp)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_fct",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl_typ ::= STRUCT IDENT LC list_decl_vars RC SCOLON 
            {
              Dtyp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Dvar> ld = (LinkedList<Dvar>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Dtyp(i,ld); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_typ",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_var ::= STRUCT IDENT nonempty_list_comma_ident_star SCOLON 
            {
              Dvar RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dvar(i,li); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_var ::= TYPE nonempty_list_comma_ident SCOLON 
            {
              Dvar RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Dvar("int", li); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_var",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= decl_fct 
            {
              Decl RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dfct df = (Dfct)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = df; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= decl_typ 
            {
              Decl RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dtyp dt = (Dtyp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= decl_var 
            {
              Decl RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dvar dv = (Dvar)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dv; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list_decl ::= 
            {
              LinkedList<Decl> RESULT =null;
		 RESULT = new LinkedList<Decl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list_decl ::= decl list_decl 
            {
              LinkedList<Decl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Decl> ld = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ld.addFirst(d); RESULT = ld; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_decl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= list_decl 
            {
              File RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Decl> ld = (LinkedList<Decl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new File(ld); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		File start_val = (File)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

